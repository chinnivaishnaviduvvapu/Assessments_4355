# -*- coding: utf-8 -*-
"""Booking_LVADSUSR147_Duvvapu.Chinni.Vaishnavi.ipynb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d1gSqPT28IfrQpw11aEKPLJdabCrAK15
"""

#1 Handling missing values and outliers
import pandas as pd
import numpy as np
import sklearn
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler,MinMaxScaler
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.metrics import r2_score,mean_squared_error
from sklearn.metrics import precision_score, recall_score, f1_score

df=pd.read_csv("/content/sample_data/booking.csv")
df.head()

df.info()

df.isna().sum()

df.describe(include="all")

df["room type"]=df["room type"].fillna(df["room type"].mode()[0])

df["average price"]=df["average price"].fillna(df["average price"].median())

df.isna().sum()

for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
# Create a box plot for each numerical column
for column in numerical_columns:
    plt.figure(figsize=(10, 6))  # Set the figure size for better readability
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

def wisker(col):
  q1,q3=np.percentile(col,[25,75])
  iqr=q3-q1
  lw=q1-1.5*iqr
  uw=q3+1.5*iqr
  return lw,uw

  for i in  df.select_dtypes(include=['float64', 'int64']).columns:
    lw,uw=wisker(df[i])
    df[i]=np.where(df[i]<lw,lw,df[i])
    df[i]=np.where(df[i]>uw,uw,df[i])

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
# Compute the correlation matrix for numerical variables
correlation_matrix = df[numerical_columns].corr()
print("Correlation matrix:\n", correlation_matrix)

sns.heatmap(correlation_matrix,annot=True)

#2 Encoding categorical data
for i in df.select_dtypes(include=['object']).columns:
  print(df[i].value_counts())

d = pd.get_dummies(df, columns=['type of meal'],dtype=int)

d = pd.get_dummies(d, columns=['market segment type'],dtype=int)

d = pd.get_dummies(d, columns=['room type'],dtype=int)

for column in d.columns:
  if d[column].dtype==np.number:
    continue
  d[column]=LabelEncoder().fit_transform(d[column])

#3
d.duplicated().sum()

d=d.dropna(columns=["number of adults","number of children","car parking space","repeated","P-C","P-not-C"])

d.columns

#dropping the columns with heavy outliers
d=d[['Booking_ID','number of weekend nights', 'number of week nights', 'lead time',
       'average price', 'special requests', 'date of reservation',
       'booking status', 'type of meal_Meal Plan 1',
       'type of meal_Meal Plan 2', 'type of meal_Meal Plan 3',
       'type of meal_Not Selected', 'market segment type_Aviation',
       'market segment type_Complementary', 'market segment type_Corporate',
       'market segment type_Offline', 'market segment type_Online',
       'room type_Room_Type 1', 'room type_Room_Type 2',
       'room type_Room_Type 3', 'room type_Room_Type 4',
       'room type_Room_Type 5', 'room type_Room_Type 6',
       'room type_Room_Type 7']]

#4 Data Splitting
x=d[['Booking_ID','number of weekend nights', 'number of week nights', 'lead time',
       'average price', 'special requests', 'date of reservation','type of meal_Meal Plan 1',
       'type of meal_Meal Plan 2', 'type of meal_Meal Plan 3',
       'type of meal_Not Selected', 'market segment type_Aviation',
       'market segment type_Complementary', 'market segment type_Corporate',
       'market segment type_Offline', 'market segment type_Online',
       'room type_Room_Type 1', 'room type_Room_Type 2',
       'room type_Room_Type 3', 'room type_Room_Type 4',
       'room type_Room_Type 5', 'room type_Room_Type 6',
       'room type_Room_Type 7']]

y=d["booking status"]
y

x=StandardScaler().fit_transform(x)

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)

# 5 Model Development and Training
model=LogisticRegression()
model.fit(x_train,y_train)

y_pre=model.predict(x_test)
y_pre

y_pred=model.predict_proba(x_test)
y_pred

#6 Model Evaluation
acc=accuracy_score(y_test,y_pre)
acc

p=precision_score(y_test,y_pre)
p

r=recall_score(y_test,y_pre)
r

f=f1_score(y_test,y_pre)
f

cm=confusion_matrix(y_test,y_pre)
cm

sns.heatmap(cm,annot=True)

m=model.score(x_test,y_test)
m