# -*- coding: utf-8 -*-
"""Q3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ijLZythMWBr1Q5e_PApcVKP148ICwKaL
"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
# import statsmodels.api as sm

import warnings
warnings.filterwarnings("ignore")

from sklearn.preprocessing import LabelEncoder,MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.impute import KNNImputer
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import r2_score,mean_squared_error
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import xgboost as xgb
from sklearn.metrics import silhouette_score

df=pd.read_csv('/content/sample_data/customer_segmentation.csv')
df.head(10)

df.shape

df.info()

df.dtypes

df.isna().sum()

from sklearn.impute import KNNImputer
impute=KNNImputer()
for i in df.select_dtypes(include="number").columns:
  df[i]=impute.fit_transform(df[[i]])

for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

# Plot bar charts for categorical columns
for column in df.select_dtypes(include=['object']).columns:
    plt.figure(figsize=(10, 5))
    df[column].value_counts().plot(kind='bar')
    plt.title(f'Bar Chart of {column}')
    plt.xlabel(column)
    plt.ylabel('Count')
    plt.show()

df.describe()

df.duplicated().sum()

df.info()

print(df.select_dtypes(include = ['int64','float64']).corr())

# Feature selection and data cleaning
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
# Compute the correlation matrix for numerical variables
correlation_matrix = df[numerical_columns].corr()
plt.figure(figsize=(20, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Heatmap of Correlation Matrix')
plt.show()

#outliers detection
for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 6))  # Set the figure size for better readability
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

# handling the outliers using iqr
for columns in df.select_dtypes(include="number"):
  q1=df[columns].quantile(0.25)
  q3=df[columns].quantile(0.75)
  iqr=q3-q1
  lower=q1-1.5*iqr
  upper=q3+1.5*iqr
  new_df=df.loc[(df[columns]<upper)&(df[columns]>lower)]

for column in df.columns:
  if df[column].dtype==np.number:
    continue
  df[column]=LabelEncoder().fit_transform(df[column])

scaler = MinMaxScaler()
for column in df.select_dtypes(include=['float64','int64']):
  df[column] = scaler.fit_transform(df[[column]])

k_range = range(1,20)
sse = []
for k in k_range:
  km = KMeans(n_clusters=k)
  km.fit(df)
  sse.append(km.inertia_)
plt.xlabel('Clusters')
plt.ylabel('SSE value')
plt.plot(k_range,sse,marker='.')

km=KMeans(n_clusters=9)
y_pred = km.fit_predict(df.drop(columns=['Education', 'Marital_Status','Dt_Customer']))
df['cluster'] = y_pred

df.columns

silhouette_score(df.drop(columns=['Education', 'Marital_Status','Dt_Customer']), y_pred)

df.columns

df1 = df[df.cluster == 0]
df2 = df[df.cluster == 1]
df3 = df[df.cluster == 2]
df4 = df[df.cluster == 3]
df5 = df[df.cluster == 4]
df6 = df[df.cluster == 5]
df7 = df[df.cluster == 6]
df8 = df[df.cluster == 7]
plt.scatter(df1.Recency,df1['MntFruits'],color='green')
plt.scatter(df2.Recency,df2['MntFruits'],color='blue')
plt.scatter(df3.Recency,df3['MntFruits'],color='black')
plt.scatter(df4.Recency,df4['MntFruits'],color='pink')
plt.scatter(df5.Recency,df5['MntFruits'],color='yellow')
plt.scatter(df6.Recency,df6['MntFruits'],color='purple')
plt.scatter(df7.Recency,df7['MntFruits'],color='grey')
plt.scatter(df8.Recency,df8['MntFruits'],color='orange')
plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='red',marker='*',label='centroid')
plt.xlabel('Recency')
plt.ylabel('MntFruits')
plt.legend()