# -*- coding: utf-8 -*-
"""Expense_LVADSUSR147_Duvvapu.Chinni.Vaishnavi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pfmK95hPrjUKGtfGgg62u9O7AUnrBhcx
"""

#1 Handling missing values and outliers
import pandas as pd
import numpy as np
import sklearn
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler,MinMaxScaler
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.metrics import r2_score,mean_squared_error
from sklearn.metrics import precision_score, recall_score, f1_score

df=pd.read_csv("/content/sample_data/expenses.csv")
df.head()

df.info()

df.describe()

df.isna().sum()

a=df["bmi"].median()

df["bmi"]=df["bmi"].fillna(a)

df.isna().sum()

df.duplicated().sum()

df=df.drop_duplicates()

df.duplicated().sum()

# Plot histograms for numerical columns
for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

# Plot bar charts for categorical columns
for column in df.select_dtypes(include=['object']).columns:
    plt.figure(figsize=(10, 5))
    df[column].value_counts().plot(kind='bar')
    plt.title(f'Bar Chart of {column}')
    plt.xlabel(column)
    plt.ylabel('Count')
    plt.show()

# Generate scatter plots for pairs of numerical variables
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
for i in range(len(numerical_columns)):
    for j in range(i + 1, len(numerical_columns)):
        plt.figure(figsize=(10, 6))
        sns.scatterplot(data=df, x=numerical_columns[i], y=numerical_columns[j])
        plt.title(f'Scatter Plot between {numerical_columns[i]} and {numerical_columns[j]}')
        plt.show()

# Generate scatter plots for pairs of numerical variables
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
for i in range(len(numerical_columns)):
        plt.figure(figsize=(10, 6))
        sns.scatterplot(data=df, x=numerical_columns[i], y="charges")
        plt.title(f'Scatter Plot between {numerical_columns[i]} and {numerical_columns[j]}')
        plt.show()

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
# Create a box plot for each numerical column
for column in numerical_columns:
    plt.figure(figsize=(10, 6))  # Set the figure size for better readability
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

def wisker(col):
  q1,q3=np.percentile(col,[25,75])
  iqr=q3-q1
  lw=q1-1.5*iqr
  uw=q3+1.5*iqr
  return lw,uw

  for i in df.select_dtypes(include=['float64', 'int64']).columns:
    lw,uw=wisker(df[i])
    df[i]=np.where(df[i]<lw,lw,df[i])
    df[i]=np.where(df[i]>uw,uw,df[i])

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
# Create a box plot for each numerical column
for column in numerical_columns:
    plt.figure(figsize=(10, 6))  # Set the figure size for better readability
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

#2 Encoding categoriacal data
for i in df.select_dtypes(include=['object']).columns:
  print(df[i].value_counts())

d = pd.get_dummies(df, columns=['sex'],dtype=int)

d.head()

d = pd.get_dummies(d, columns=['smoker'],dtype=int)

d.head()

d = pd.get_dummies(d, columns=['region'],dtype=int)

d.head()

#3 Feature selection and Data Cleaning
numerical_columns = d.select_dtypes(include=['float64', 'int64']).columns
correlation_matrix = d[numerical_columns].corr()
print("Correlation matrix:\n", correlation_matrix)

sns.heatmap(correlation_matrix,annot=True)

d.duplicated().sum()

d=d.drop_duplicates()
d.duplicated().sum()

#4 Data Splitting
d.columns

df.columns

x=d
x

y=df["charges"]
y

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

#5 Model development and training
model=LinearRegression()

model.fit(x_train,y_train)

y_predict=model.predict(x_test)

y_predict

#Model Evaluationmean_squared_error(y_test,y_predict)
mse=
mse

rmse=mean_squared_error(y_test,y_predict,squared=False)
rmse

r2=r2_score(y_test,y_predict)
r2

m=model.score(x_test,y_test)
m